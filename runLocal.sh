#!/usr/bin/env bash

#
# This script can be used to run the demo app and template from a commandline.
# See documentation in README.md
#


projectDir=$(readlink -f $(dirname "$0"))
composeFile="localdev/docker-compose.yml"
cd $projectDir

function refresh_config() {
	cd $projectDir
	echo -e "\n\e[1;33m* Refreshing localdev config\e[0m\n"

	debugPort=4000
	httpPort=8080

	aliases=""
	runnableJars=""
	integrationTestsJars=""
	ports=""

	echo "### Autogenerated - DO NOT EDIT" > localdev/docker-compose.yml
	cat localdev/docker-compose.base.yml >> localdev/docker-compose.yml
	rm -f localdev/app-config/postgresql-initdb.d/*.sh
	rm -f localdev/.deploy/*.jar

	files=$(find . -name localdev.config)
	for file in $files; do
		configDir=$(readlink -f $(dirname "$file"))

		echo "  * Processing '$file'"
		local name=""
		local alias=""
		local jarToRun=""
		local composeFile=""
		local postgresInitScript=""
		local integrationTestsJar=""
		. $file

		if [ ! -f "$composeFile" ]; then
			echo "'$composeFile' does not exist"
			exit 1
		fi

		aliases="$aliases $alias=$name"
		runnableJars="$runnableJars $name=${jarToRun#$projectDir/}"
		ports="$ports $name=http/$httpPort,debug/$debugPort"

		sed "s|##DEBUG_PORT##|$debugPort|g;s|##HTTP_PORT##|$httpPort|g" "$composeFile" >> localdev/docker-compose.yml
		if [ -n "$postgresInitScript" ]; then
			cp "$postgresInitScript" "localdev/app-config/postgresql-initdb.d/$name.sh"
			chmod a+x "localdev/app-config/postgresql-initdb.d/$name.sh"
		fi
		if [ -n "$integrationTestsJar" ]; then
			integrationTestsJars="$integrationTestsJars $name=${integrationTestsJar#$projectDir/}"
		fi
		httpPort=$((httpPort+1))
		debugPort=$((debugPort+1))
	done

	echo "### Autogenerated - DO NOT EDIT" > "localdev/config.sh"
	echo "aliases=\"${aliases# }\"" >> "localdev/config.sh"
	echo "runnableJars=\"${runnableJars# }\"" >> "localdev/config.sh"
	echo "integrationTestsJars=\"${integrationTestsJars# }\"" >> "localdev/config.sh"
	echo "ports=\"${ports# }\"" >> "localdev/config.sh"
}

function read_config() {
	. "localdev/config.sh"

	jarsToRun=""
	services=""
	servicesArg=""

	for jar in $runnableJars; do
		j=(${jar//=/ })
		services="$services ${j[0]}"
		jarsToRun="$jarsToRun ${j[1]}"
	done
}

if [ ! -f "localdev/config.sh" ]; then
	refresh_config
fi
read_config


[ -z "$JAVA_DEBUG" ] && export JAVA_DEBUG=""


function copy_jars() {
	echo -e "\n\e[1;33m* Copying jars into place\e[0m\n"

	mkdir -p "localdev/.deploy/"
	for jar in $jarsToRun; do
		if [ ! -f $jar ]; then
			echo -e "\e[0;31m$jar does not exist, please build first\e[0m"
			exit 1
		fi
		cp -v "$jar" "localdev/.deploy/${jar##*/}"
	done
}

function get_services() {
	if [ -z "$servicesArg" ]; then
		echo -n "$services"
	else
		echo -n "$servicesArg"
	fi
}

function get_service_build_params() {
	if [ -z "$servicesArg" ]; then
		echo ""
		return 0
	fi
	serviceDirs=""
	for service in $servicesArg; do
		for jar in $runnableJars; do
			j=(${jar//=/ })
			if [ "${j[0]}" == "$service" ]; then
				j1="${j[1]}"
				serviceDirs="$serviceDirs,${j1%/target/*}"
			fi
		done
	done
	echo -n "-pl ${serviceDirs#,} -am"
}

function get_service_name() {
	# check for defined aliases
	for alias in $aliases; do
		a=(${alias//=/ })
		if [[ "$1" == "${a[0]}" ]] || [[ "$1" == "${a[1]}" ]]; then
			echo -n "${a[1]}"
			return 0
		fi
	done
	return 1
}

function print_ports() {
	echo -e "\n\e[1;33m* Access services\e[0m\n"
	for service in $ports; do
		s=(${service//=/ })
		sp=${s[1]}
		protocols=(${sp//,/ })
		echo "${s[0]} - http://localhost:${protocols[0]#http/}/ - debug on ${protocols[1]#debug/}"
	done
	echo "pgweb - http://localhost:54321/"
}

function maven_build() {
		echo -e "\e[0;34mmvn $@\e[0m\n"
		mvn --color=always $@ | grep --color=never -E 'Building.*\[|SUCCESS|FAIL|ERROR|-<|\] Test|Result|Total'
		exit_code=${PIPESTATUS[0]}
		if [ $exit_code != 0 ]; then
			echo -e "\n\e[1;31mRun 'mvn $@' manually to see detailed errors\e[0m\n"
			exit $exit_code
		fi
}

function integration_tests() {
	services=$(get_services)

	for service in $integrationTestsJars; do
		s=(${service//=/ })
		name="${s[0]}"
		if [[ "$services" =~ $name ]]; then
			jar="${s[1]}"
			for sp in $ports; do
				s=(${sp//=/ })
				spp=${s[1]}
				protocols=(${spp//,/ })
				if [ "$name" == "${s[0]}" ]; then
					baseUrl="http://localhost:${protocols[0]#http/}/"
				fi
			done

			echo -e "\e[1;33m$name:\e[0m \e[0;34mjava -jar $jar $baseUrl\e[0m\n"
			java -jar "$jar" "$baseUrl"
			exit_code=$?
			if [ $exit_code == 0 ]; then
				echo -e "\n\e[1;32m✓ $name success\e[0m\n"
			else
				echo -e "\n\e[1;31m❌ $name failed (error code $exit_code)\e[0m\n"
				exit $exit_code
			fi
		fi
	done
}

cd $projectDir
while [[ $# -gt 0 ]]; do
	option="$1"
	shift

	case "$option" in
		refresh)
			refresh_config
			read_config
		;;
		-s)
			services=(${1//,/ })
			for service in "${services[@]}"; do
				if ! serviceName="$(get_service_name $service)"; then
					echo "Unknown service '$service'"
					exit 1
				fi
				servicesArg="$servicesArg $serviceName"
			done
			shift
		;;
		-a)
			# All services
			servicesArg=""
		;;
		build)
			echo -e "\n\e[1;33m* Building with maven:\e[0m \e[32m$projectDir\e[0m\n"
			maven_build -P local clean install $(get_service_build_params)
		;;
		qbuild)
			echo -e "\n\e[1;33m* Building with maven:\e[0m \e[32m$projectDir\e[0m\n"
			maven_build -P local install $(get_service_build_params) -DskipTests
		;;
		start|up|run)
			copy_jars
			echo -e "\n\e[1;33m* Starting containers\e[0m\n"
			docker-compose -f $composeFile up -d
			print_ports
		;;
		debug)
			export JAVA_DEBUG="true"
			copy_jars
			echo -e "\n\e[1;33m* Starting containers in debug mode\e[0m\n"
			docker-compose -f $composeFile up -d
			print_ports
		;;
		restart)
			copy_jars
			echo -e "\n\e[1;33m* Restarting containers: $(get_services)\e[0m\n"
			docker-compose -f $composeFile kill $(get_services) && docker-compose -f $composeFile start $(get_services)
		;;
		log|logs)
			echo -e "\n\e[1;33m* Tailing logs for containers: $(get_services)\e[0m\n"
			docker-compose -f $composeFile logs -f --tail=20 $(get_services)
		;;
		alllogs)
			echo -e "\n\e[1;33m* Tailing logs\e[0m\n"
			docker-compose -f $composeFile logs -f --tail=20
		;;
		pause)
			echo -e "\n\e[1;33m* Stopping containers\e[0m\n"
			docker-compose -f $composeFile stop
		;;
		stop|down)
			echo -e "\n\e[1;33m* Stopping and removing containers\e[0m\n"
			docker-compose -f $composeFile kill && docker-compose -f $composeFile down
		;;
		itests)
			echo -e "\n\e[1;33m* Running integration tests: $(get_services)\e[0m\n"
			integration_tests
		;;
		dbconnect)
			db="$1"
			shift
			echo -e "\n\e[1;33m* Connecting to database: '$db'\e[0m\n"
			echo -e "\e[0;32mIf just browsing the databases consider instead using the web interface http://localhost:54321/\e[0m\n"
			echo -e "\e[0;34mdocker exec -it demoapp-postgresql-server psql -h localhost -U $db $db\e[0m\n"
			docker exec -it demoapp-postgresql-server psql -h localhost -U "$db" "$db"
		;;
		*)
			echo "Unknown arguments: $*"
			echo "Usage: $0 build|start|logs|pause|stop|refresh"
			exit 1
		;;
	esac

done
